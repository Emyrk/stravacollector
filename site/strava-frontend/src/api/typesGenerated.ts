// Code generated by 'guts'. DO NOT EDIT.

// From modelsdk/athlete.go
export interface ActivitySummary {
    activity_id: string;
    athlete_id: string;
    upload_id: string;
    external_id: string;
    name: string;
    distance: number;
    moving_time: number;
    elapsed_time: number;
    total_elevation_gain: number;
    activity_type: string;
    sport_type: string;
    start_date: string;
    start_date_local: string;
    timezone: string;
}

// From modelsdk/athlete.go
export interface AthleteHugelActivities {
    activities: AthleteHugelActivity[];
}

// From modelsdk/athlete.go
export interface AthleteHugelActivity {
    summary: ActivitySummary;
    efforts: SegmentEffort[];
    total_time_seconds: number;
}

// From modelsdk/athlete.go
export interface AthleteLoad {
    athlete_id: number;
    activity_time_after: string;
    last_load_attempt: string;
    last_load_complete: boolean;
    next_load_not_before: string;
}

// From modelsdk/athlete.go
export interface AthleteLogin {
    athlete_id: string;
    summit: boolean;
}

// From modelsdk/athlete.go
export interface AthleteSummary {
    athlete_id: string;
    summit: boolean;
    username: string;
    firstname: string;
    lastname: string;
    sex: string;
    profile_pic_link: string;
    profile_pic_link_medium: string;
    updated_at: string;
    hugel_count: number;
}

// From modelsdk/athlete.go
export interface AthleteSyncSummary {
    athlete_load: AthleteLoad;
    total_activities: number;
    synced_activities: SyncActivitySummary[];
    athlete_summary: AthleteSummary;
    total_summary: number;
    total_detail: number;
}

export type Comparable = string | number | boolean;

// From modelsdk/route.go
export interface CompetitiveRoute {
    name: string;
    display_name: string;
    description: string;
    segments: SegmentSummary[];
}

// From modelsdk/route.go
export interface CompetitiveRoutesResponse {
    routes: Record<string, CompetitiveRoute>;
}

// From modelsdk/route.go
export interface DetailedSegment {
    id: string;
    name: string;
    friendly_name: string;
    activity_type: string;
    distance: number;
    average_grade: number;
    maximum_grade: number;
    elevation_high: number;
    elevation_low: number;
    start_latlng: number[];
    end_latlng: number[];
    elevation_profile: string;
    climb_category: number;
    city: string;
    state: string;
    country: string;
    private: boolean;
    hazardous: boolean;
    created_at: string;
    updated_at: string;
    total_elevation_gain: number;
    map: Map;
    total_effort_count: number;
    total_athlete_count: number;
    total_star_count: number;
    fetched_at: string;
}

// From modelsdk/athlete.go
export interface Eddington {
    athlete_id: number;
    miles_histogram: number[];
    current_eddington: number;
    last_calculated: string;
    total_activities: number;
}

// From modelsdk/athlete.go
export interface HugelLeaderBoard {
    personal_best?: HugelLeaderBoardActivity;
    superlatives: SuperlativeList;
    activities: HugelLeaderBoardActivity[];
}

// From modelsdk/athlete.go
export interface HugelLeaderBoardActivity {
    rank_one_elapsed: number;
    activity_id: string;
    athlete_id: string;
    elapsed: number;
    rank: number;
    efforts: SegmentEffort[];
    athlete: MinAthlete;
    activity_name: string;
    activity_distance: number;
    activity_moving_time: number;
    activity_elapsed_time: number;
    activity_start_date: string;
    activity_total_elevation_gain: number;
    activity_suffer_score: number;
    activity_achievement_count: number;
}

// From modelsdk/map.go
export interface Map {
    id: string;
    polyline: string;
    summary_polyline: string;
    updated_at: string;
}

// From modelsdk/athlete.go
export interface MinAthlete {
    athlete_id: string;
    username: string;
    firstname: string;
    lastname: string;
    sex: string;
    profile_pic_link: string;
    hugel_count: number;
}

// From modelsdk/route.go
export interface PersonalBestSegmentEffort {
    best_effort_id: string;
    best_effort_elapsed_time: number;
    best_effort_moving_time: number;
    best_effort_start_date: string;
    best_effort_start_date_local: string;
    best_effort_device_watts: boolean;
    best_effort_average_watts: number;
    best_effort_activities_id: string;
}

// From modelsdk/route.go
export interface PersonalSegment {
    detailed_segment: DetailedSegment;
    starred?: boolean;
    personal_best?: PersonalBestSegmentEffort;
}

// From modelsdk/response.go
export interface Response {
    message: string;
    detail?: string;
}

// From modelsdk/athlete.go
export interface SegmentEffort {
    activity_id: string;
    effort_id: string;
    start_date: string;
    segment_id: string;
    elapsed_time: number;
    moving_time: number;
    device_watts: boolean;
    average_watts: number;
}

// From modelsdk/route.go
export interface SegmentSummary {
    id: string;
    name: string;
}

// From sdktype/int.go
export type StringInt = number;

// From modelsdk/athlete.go
export interface SuperHugelLeaderBoard {
    personal_best?: SuperHugelLeaderBoardActivity;
    activities: SuperHugelLeaderBoardActivity[];
}

// From modelsdk/athlete.go
export interface SuperHugelLeaderBoardActivity {
    rank_one_elapsed: number;
    athlete_id: string;
    elapsed: number;
    rank: number;
    efforts: SegmentEffort[];
    athlete: MinAthlete;
}

// From superlative/superlative.go
export interface SuperlativeEntry<SuperlativeT extends Comparable> {
    activity_id: string;
    value: SuperlativeT;
}

// From superlative/superlative.go
export interface SuperlativeList {
    earliest_start: SuperlativeEntry<string>;
    latest_end: SuperlativeEntry<string>;
    most_stoppage: SuperlativeEntry<number>;
    least_stoppage: SuperlativeEntry<number>;
    most_avg_watts: SuperlativeEntry<number>;
    most_avg_cadence: SuperlativeEntry<number>;
    least_avg_cadence: SuperlativeEntry<number>;
    most_avg_speed: SuperlativeEntry<number>;
    least_avg_speed: SuperlativeEntry<number>;
    most_avg_hr: SuperlativeEntry<number>;
    least_avg_hr: SuperlativeEntry<number>;
    most_suffer: SuperlativeEntry<number>;
    most_achievements: SuperlativeEntry<number>;
    longest_ride: SuperlativeEntry<number>;
    shortest_ride: SuperlativeEntry<number>;
}

// From modelsdk/athlete.go
export interface SyncActivitySummary {
    activity_summary: ActivitySummary;
    synced: boolean;
    synced_at: string;
}

// From modelsdk/route.go
export interface VerifyRouteResponse {
    missing_segments: SegmentSummary[];
}


