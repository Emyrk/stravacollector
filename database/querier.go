// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
)

type sqlcQuerier interface {
	AllCompetitiveRoutes(ctx context.Context) ([]CompetitiveRoute, error)
	AthleteHugelActivites(ctx context.Context, athleteID int64) ([]AthleteHugelActivitesRow, error)
	AthleteSyncedActivities(ctx context.Context, arg AthleteSyncedActivitiesParams) ([]AthleteSyncedActivitiesRow, error)
	// BestRouteEfforts returns all activities that have efforts on all the provided segments.
	// The returned activities include the best effort for each segment.
	// This isn't used in the app, but is the foundation for the hugel view.
	BestRouteEfforts(ctx context.Context, expectedSegments []int64) ([]BestRouteEffortsRow, error)
	DeleteActivity(ctx context.Context, id int64) (ActivitySummary, error)
	DeleteAthleteLogin(ctx context.Context, athleteID int64) error
	GetActivityDetail(ctx context.Context, id int64) (ActivityDetail, error)
	GetActivitySummary(ctx context.Context, id int64) (ActivitySummary, error)
	GetAthlete(ctx context.Context, athleteID int64) (Athlete, error)
	GetAthleteFull(ctx context.Context, athleteID int64) (GetAthleteFullRow, error)
	GetAthleteLoad(ctx context.Context, athleteID int64) (AthleteForwardLoad, error)
	GetAthleteLoadDetailed(ctx context.Context, athleteID int64) (GetAthleteLoadDetailedRow, error)
	GetAthleteLogin(ctx context.Context, athleteID int64) (AthleteLogin, error)
	GetAthleteLoginFull(ctx context.Context, athleteID int64) (GetAthleteLoginFullRow, error)
	// -- name: GetAthleteNeedsLoad :many
	// SELECT
	// 	sqlc.embed(athlete_forward_load), sqlc.embed(athlete_logins)
	// FROM
	// 	athlete_forward_load
	// INNER JOIN
	// 	athlete_logins
	// 	ON
	// 		athlete_load.athlete_id = athlete_logins.athlete_id
	// WHERE
	// 	athlete_load.next_load_not_before < Now()
	// ORDER BY
	// 	-- Athletes with oldest load attempt first.
	// 	-- Order is [false, true].
	// 	not last_load_incomplete, earliest_activity_done, last_touched
	// LIMIT 5;
	GetAthleteNeedsLoad(ctx context.Context) ([]GetAthleteNeedsLoadRow, error)
	GetBestPersonalSegmentEffort(ctx context.Context, arg GetBestPersonalSegmentEffortParams) ([]SegmentEffort, error)
	GetCompetitiveRoute(ctx context.Context, routeName string) (GetCompetitiveRouteRow, error)
	GetSegments(ctx context.Context, segmentIds []int64) ([]GetSegmentsRow, error)
	// This query needs to be simplified
	HugelLeaderboard(ctx context.Context, arg HugelLeaderboardParams) ([]HugelLeaderboardRow, error)
	IncrementActivitySummaryDownload(ctx context.Context, id int64) error
	InsertFailedJob(ctx context.Context, rawJson string) (FailedJob, error)
	InsertWebhookDump(ctx context.Context, rawJson string) (WebhookDump, error)
	LoadedSegments(ctx context.Context) ([]LoadedSegmentsRow, error)
	MissingHugelSegments(ctx context.Context, activityID int64) ([]Segment, error)
	MissingSegments(ctx context.Context, activitiesID int64) ([]string, error)
	NeedsARefresh(ctx context.Context) ([]NeedsARefreshRow, error)
	RefreshHugel2023Activities(ctx context.Context) error
	RefreshHugelActivities(ctx context.Context) error
	RefreshHugelLiteActivities(ctx context.Context) error
	RefreshSuperHugelActivities(ctx context.Context) error
	StarSegments(ctx context.Context, arg StarSegmentsParams) error
	SuperHugelLeaderboard(ctx context.Context, athleteID interface{}) ([]SuperHugelLeaderboardRow, error)
	TotalActivityDetailsCount(ctx context.Context) (int64, error)
	TotalJobCount(ctx context.Context) (int64, error)
	TotalRideActivitySummariesCount(ctx context.Context) (int64, error)
	UpdateActivityName(ctx context.Context, arg UpdateActivityNameParams) error
	UpdateActivityType(ctx context.Context, arg UpdateActivityTypeParams) error
	UpsertActivityDetail(ctx context.Context, arg UpsertActivityDetailParams) (ActivityDetail, error)
	UpsertActivitySummary(ctx context.Context, arg UpsertActivitySummaryParams) (ActivitySummary, error)
	UpsertAthlete(ctx context.Context, arg UpsertAthleteParams) (Athlete, error)
	UpsertAthleteForwardLoad(ctx context.Context, arg UpsertAthleteForwardLoadParams) (AthleteForwardLoad, error)
	UpsertAthleteLoad(ctx context.Context, arg UpsertAthleteLoadParams) (AthleteLoad, error)
	UpsertAthleteLogin(ctx context.Context, arg UpsertAthleteLoginParams) (AthleteLogin, error)
	UpsertMapData(ctx context.Context, arg UpsertMapDataParams) (Map, error)
	UpsertSegment(ctx context.Context, arg UpsertSegmentParams) (Segment, error)
	UpsertSegmentEffort(ctx context.Context, arg UpsertSegmentEffortParams) (SegmentEffort, error)
}

var _ sqlcQuerier = (*sqlQuerier)(nil)
