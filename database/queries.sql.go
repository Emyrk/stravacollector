// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package database

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const deleteActivity = `-- name: DeleteActivity :one
DELETE FROM
	activities
WHERE
	id = $1
RETURNING id, athlete_id, upload_id, external_id, name, moving_time, elapsed_time, total_elevation_gain, activity_type, sport_type, start_date, start_date_local, timezone, utc_offset, start_latlng, end_latlng, achievement_count, kudos_count, comment_count, athlete_count, photo_count, map_id, map_polyline, map_summary_polyline, trainer, commute, manual, private, flagged, gear_id, from_accepted_tag, average_speed, max_speed, average_cadence, average_temp, average_watts, weighted_average_watts, kilojoules, device_watts, has_heartrate, max_watts, elev_high, elev_low, pr_count, total_photo_count, workout_type, suffer_score, calories, embed_token, segment_leaderboard_opt_out, leaderboard_opt_out, num_segment_efforts, premium_fetch, updated_at
`

func (q *sqlQuerier) DeleteActivity(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRowContext(ctx, deleteActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.AthleteID,
		&i.UploadID,
		&i.ExternalID,
		&i.Name,
		&i.MovingTime,
		&i.ElapsedTime,
		&i.TotalElevationGain,
		&i.ActivityType,
		&i.SportType,
		&i.StartDate,
		&i.StartDateLocal,
		&i.Timezone,
		&i.UtcOffset,
		pq.Array(&i.StartLatlng),
		pq.Array(&i.EndLatlng),
		&i.AchievementCount,
		&i.KudosCount,
		&i.CommentCount,
		&i.AthleteCount,
		&i.PhotoCount,
		&i.MapID,
		&i.MapPolyline,
		&i.MapSummaryPolyline,
		&i.Trainer,
		&i.Commute,
		&i.Manual,
		&i.Private,
		&i.Flagged,
		&i.GearID,
		&i.FromAcceptedTag,
		&i.AverageSpeed,
		&i.MaxSpeed,
		&i.AverageCadence,
		&i.AverageTemp,
		&i.AverageWatts,
		&i.WeightedAverageWatts,
		&i.Kilojoules,
		&i.DeviceWatts,
		&i.HasHeartrate,
		&i.MaxWatts,
		&i.ElevHigh,
		&i.ElevLow,
		&i.PrCount,
		&i.TotalPhotoCount,
		&i.WorkoutType,
		&i.SufferScore,
		&i.Calories,
		&i.EmbedToken,
		&i.SegmentLeaderboardOptOut,
		&i.LeaderboardOptOut,
		&i.NumSegmentEfforts,
		&i.PremiumFetch,
		&i.UpdatedAt,
	)
	return i, err
}

const getActivity = `-- name: GetActivity :one
SELECT
	id, athlete_id, upload_id, external_id, name, moving_time, elapsed_time, total_elevation_gain, activity_type, sport_type, start_date, start_date_local, timezone, utc_offset, start_latlng, end_latlng, achievement_count, kudos_count, comment_count, athlete_count, photo_count, map_id, map_polyline, map_summary_polyline, trainer, commute, manual, private, flagged, gear_id, from_accepted_tag, average_speed, max_speed, average_cadence, average_temp, average_watts, weighted_average_watts, kilojoules, device_watts, has_heartrate, max_watts, elev_high, elev_low, pr_count, total_photo_count, workout_type, suffer_score, calories, embed_token, segment_leaderboard_opt_out, leaderboard_opt_out, num_segment_efforts, premium_fetch, updated_at
FROM
    activities
WHERE
    id = $1
`

func (q *sqlQuerier) GetActivity(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.AthleteID,
		&i.UploadID,
		&i.ExternalID,
		&i.Name,
		&i.MovingTime,
		&i.ElapsedTime,
		&i.TotalElevationGain,
		&i.ActivityType,
		&i.SportType,
		&i.StartDate,
		&i.StartDateLocal,
		&i.Timezone,
		&i.UtcOffset,
		pq.Array(&i.StartLatlng),
		pq.Array(&i.EndLatlng),
		&i.AchievementCount,
		&i.KudosCount,
		&i.CommentCount,
		&i.AthleteCount,
		&i.PhotoCount,
		&i.MapID,
		&i.MapPolyline,
		&i.MapSummaryPolyline,
		&i.Trainer,
		&i.Commute,
		&i.Manual,
		&i.Private,
		&i.Flagged,
		&i.GearID,
		&i.FromAcceptedTag,
		&i.AverageSpeed,
		&i.MaxSpeed,
		&i.AverageCadence,
		&i.AverageTemp,
		&i.AverageWatts,
		&i.WeightedAverageWatts,
		&i.Kilojoules,
		&i.DeviceWatts,
		&i.HasHeartrate,
		&i.MaxWatts,
		&i.ElevHigh,
		&i.ElevLow,
		&i.PrCount,
		&i.TotalPhotoCount,
		&i.WorkoutType,
		&i.SufferScore,
		&i.Calories,
		&i.EmbedToken,
		&i.SegmentLeaderboardOptOut,
		&i.LeaderboardOptOut,
		&i.NumSegmentEfforts,
		&i.PremiumFetch,
		&i.UpdatedAt,
	)
	return i, err
}

const updateActivityName = `-- name: UpdateActivityName :exec
UPDATE activities
SET
    name = $2
WHERE
    id = $1
`

type UpdateActivityNameParams struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *sqlQuerier) UpdateActivityName(ctx context.Context, arg UpdateActivityNameParams) error {
	_, err := q.db.ExecContext(ctx, updateActivityName, arg.ID, arg.Name)
	return err
}

const upsertActivity = `-- name: UpsertActivity :one
INSERT INTO
	activities(
	updated_at,
	id, athlete_id, upload_id, external_id, name,
	moving_time, elapsed_time, total_elevation_gain, activity_type,
	sport_type, start_date, start_date_local, timezone, utc_offset,
	start_latlng, end_latlng, achievement_count, kudos_count,
	comment_count, athlete_count, photo_count, map_id, map_polyline,
	map_summary_polyline, trainer, commute, manual, private, flagged,
	gear_id, from_accepted_tag, average_speed, max_speed, average_cadence,
	average_temp, average_watts, weighted_average_watts, kilojoules,
	device_watts, has_heartrate, max_watts, elev_high, elev_low, pr_count,
	total_photo_count, workout_type, suffer_score, calories,
	embed_token, segment_leaderboard_opt_out, leaderboard_opt_out,
	num_segment_efforts, premium_fetch

)
VALUES
	(Now(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17,
	 $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33,
	 $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49,
	 $50, $51, $52, $53)
ON CONFLICT
	(id)
	DO UPDATE SET
	updated_at = Now(),
	athlete_id = $2,
	upload_id = $3,
	external_id = $4,
	name = $5,
	moving_time = $6,
	elapsed_time = $7,
	total_elevation_gain = $8,
	activity_type = $9,
	sport_type = $10,
	start_date = $11,
	start_date_local = $12,
	timezone = $13,
	utc_offset = $14,
	start_latlng = $15,
	end_latlng = $16,
	achievement_count = $17,
	kudos_count = $18,
	comment_count = $19,
	athlete_count = $20,
	photo_count = $21,
	map_id = $22,
	map_polyline = $23,
	map_summary_polyline = $24,
	trainer = $25,
	commute = $26,
	manual = $27,
	private = $28,
	flagged = $29,
	gear_id = $30,
	from_accepted_tag = $31,
	average_speed = $32,
	max_speed = $33,
	average_cadence = $34,
	average_temp = $35,
	average_watts = $36,
	weighted_average_watts = $37,
	kilojoules = $38,
	device_watts = $39,
	has_heartrate = $40,
	max_watts = $41,
	elev_high = $42,
	elev_low = $43,
	pr_count = $44,
	total_photo_count = $45,
	workout_type = $46,
	suffer_score = $47,
	calories = $48,
	embed_token = $49,
	segment_leaderboard_opt_out = $50,
	leaderboard_opt_out = $51,
	num_segment_efforts = $52,
	premium_fetch = $53
RETURNING id, athlete_id, upload_id, external_id, name, moving_time, elapsed_time, total_elevation_gain, activity_type, sport_type, start_date, start_date_local, timezone, utc_offset, start_latlng, end_latlng, achievement_count, kudos_count, comment_count, athlete_count, photo_count, map_id, map_polyline, map_summary_polyline, trainer, commute, manual, private, flagged, gear_id, from_accepted_tag, average_speed, max_speed, average_cadence, average_temp, average_watts, weighted_average_watts, kilojoules, device_watts, has_heartrate, max_watts, elev_high, elev_low, pr_count, total_photo_count, workout_type, suffer_score, calories, embed_token, segment_leaderboard_opt_out, leaderboard_opt_out, num_segment_efforts, premium_fetch, updated_at
`

type UpsertActivityParams struct {
	ID                       int64     `db:"id" json:"id"`
	AthleteID                int64     `db:"athlete_id" json:"athlete_id"`
	UploadID                 int64     `db:"upload_id" json:"upload_id"`
	ExternalID               string    `db:"external_id" json:"external_id"`
	Name                     string    `db:"name" json:"name"`
	MovingTime               float64   `db:"moving_time" json:"moving_time"`
	ElapsedTime              float64   `db:"elapsed_time" json:"elapsed_time"`
	TotalElevationGain       float64   `db:"total_elevation_gain" json:"total_elevation_gain"`
	ActivityType             string    `db:"activity_type" json:"activity_type"`
	SportType                string    `db:"sport_type" json:"sport_type"`
	StartDate                time.Time `db:"start_date" json:"start_date"`
	StartDateLocal           time.Time `db:"start_date_local" json:"start_date_local"`
	Timezone                 string    `db:"timezone" json:"timezone"`
	UtcOffset                float64   `db:"utc_offset" json:"utc_offset"`
	StartLatlng              []float64 `db:"start_latlng" json:"start_latlng"`
	EndLatlng                []float64 `db:"end_latlng" json:"end_latlng"`
	AchievementCount         int32     `db:"achievement_count" json:"achievement_count"`
	KudosCount               int32     `db:"kudos_count" json:"kudos_count"`
	CommentCount             int32     `db:"comment_count" json:"comment_count"`
	AthleteCount             int32     `db:"athlete_count" json:"athlete_count"`
	PhotoCount               int32     `db:"photo_count" json:"photo_count"`
	MapID                    string    `db:"map_id" json:"map_id"`
	MapPolyline              string    `db:"map_polyline" json:"map_polyline"`
	MapSummaryPolyline       string    `db:"map_summary_polyline" json:"map_summary_polyline"`
	Trainer                  bool      `db:"trainer" json:"trainer"`
	Commute                  bool      `db:"commute" json:"commute"`
	Manual                   bool      `db:"manual" json:"manual"`
	Private                  bool      `db:"private" json:"private"`
	Flagged                  bool      `db:"flagged" json:"flagged"`
	GearID                   string    `db:"gear_id" json:"gear_id"`
	FromAcceptedTag          bool      `db:"from_accepted_tag" json:"from_accepted_tag"`
	AverageSpeed             float64   `db:"average_speed" json:"average_speed"`
	MaxSpeed                 float64   `db:"max_speed" json:"max_speed"`
	AverageCadence           float64   `db:"average_cadence" json:"average_cadence"`
	AverageTemp              float64   `db:"average_temp" json:"average_temp"`
	AverageWatts             float64   `db:"average_watts" json:"average_watts"`
	WeightedAverageWatts     float64   `db:"weighted_average_watts" json:"weighted_average_watts"`
	Kilojoules               float64   `db:"kilojoules" json:"kilojoules"`
	DeviceWatts              bool      `db:"device_watts" json:"device_watts"`
	HasHeartrate             bool      `db:"has_heartrate" json:"has_heartrate"`
	MaxWatts                 float64   `db:"max_watts" json:"max_watts"`
	ElevHigh                 float64   `db:"elev_high" json:"elev_high"`
	ElevLow                  float64   `db:"elev_low" json:"elev_low"`
	PrCount                  int32     `db:"pr_count" json:"pr_count"`
	TotalPhotoCount          int32     `db:"total_photo_count" json:"total_photo_count"`
	WorkoutType              int32     `db:"workout_type" json:"workout_type"`
	SufferScore              int32     `db:"suffer_score" json:"suffer_score"`
	Calories                 float64   `db:"calories" json:"calories"`
	EmbedToken               string    `db:"embed_token" json:"embed_token"`
	SegmentLeaderboardOptOut bool      `db:"segment_leaderboard_opt_out" json:"segment_leaderboard_opt_out"`
	LeaderboardOptOut        bool      `db:"leaderboard_opt_out" json:"leaderboard_opt_out"`
	NumSegmentEfforts        int32     `db:"num_segment_efforts" json:"num_segment_efforts"`
	PremiumFetch             bool      `db:"premium_fetch" json:"premium_fetch"`
}

func (q *sqlQuerier) UpsertActivity(ctx context.Context, arg UpsertActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, upsertActivity,
		arg.ID,
		arg.AthleteID,
		arg.UploadID,
		arg.ExternalID,
		arg.Name,
		arg.MovingTime,
		arg.ElapsedTime,
		arg.TotalElevationGain,
		arg.ActivityType,
		arg.SportType,
		arg.StartDate,
		arg.StartDateLocal,
		arg.Timezone,
		arg.UtcOffset,
		pq.Array(arg.StartLatlng),
		pq.Array(arg.EndLatlng),
		arg.AchievementCount,
		arg.KudosCount,
		arg.CommentCount,
		arg.AthleteCount,
		arg.PhotoCount,
		arg.MapID,
		arg.MapPolyline,
		arg.MapSummaryPolyline,
		arg.Trainer,
		arg.Commute,
		arg.Manual,
		arg.Private,
		arg.Flagged,
		arg.GearID,
		arg.FromAcceptedTag,
		arg.AverageSpeed,
		arg.MaxSpeed,
		arg.AverageCadence,
		arg.AverageTemp,
		arg.AverageWatts,
		arg.WeightedAverageWatts,
		arg.Kilojoules,
		arg.DeviceWatts,
		arg.HasHeartrate,
		arg.MaxWatts,
		arg.ElevHigh,
		arg.ElevLow,
		arg.PrCount,
		arg.TotalPhotoCount,
		arg.WorkoutType,
		arg.SufferScore,
		arg.Calories,
		arg.EmbedToken,
		arg.SegmentLeaderboardOptOut,
		arg.LeaderboardOptOut,
		arg.NumSegmentEfforts,
		arg.PremiumFetch,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.AthleteID,
		&i.UploadID,
		&i.ExternalID,
		&i.Name,
		&i.MovingTime,
		&i.ElapsedTime,
		&i.TotalElevationGain,
		&i.ActivityType,
		&i.SportType,
		&i.StartDate,
		&i.StartDateLocal,
		&i.Timezone,
		&i.UtcOffset,
		pq.Array(&i.StartLatlng),
		pq.Array(&i.EndLatlng),
		&i.AchievementCount,
		&i.KudosCount,
		&i.CommentCount,
		&i.AthleteCount,
		&i.PhotoCount,
		&i.MapID,
		&i.MapPolyline,
		&i.MapSummaryPolyline,
		&i.Trainer,
		&i.Commute,
		&i.Manual,
		&i.Private,
		&i.Flagged,
		&i.GearID,
		&i.FromAcceptedTag,
		&i.AverageSpeed,
		&i.MaxSpeed,
		&i.AverageCadence,
		&i.AverageTemp,
		&i.AverageWatts,
		&i.WeightedAverageWatts,
		&i.Kilojoules,
		&i.DeviceWatts,
		&i.HasHeartrate,
		&i.MaxWatts,
		&i.ElevHigh,
		&i.ElevLow,
		&i.PrCount,
		&i.TotalPhotoCount,
		&i.WorkoutType,
		&i.SufferScore,
		&i.Calories,
		&i.EmbedToken,
		&i.SegmentLeaderboardOptOut,
		&i.LeaderboardOptOut,
		&i.NumSegmentEfforts,
		&i.PremiumFetch,
		&i.UpdatedAt,
	)
	return i, err
}

const getAthleteLogin = `-- name: GetAthleteLogin :one
SELECT athlete_id, summit, provider_id, created_at, updated_at, oauth_access_token, oauth_refresh_token, oauth_expiry, oauth_token_type, id FROM athlete_logins WHERE athlete_id = $1
`

func (q *sqlQuerier) GetAthleteLogin(ctx context.Context, athleteID int64) (AthleteLogin, error) {
	row := q.db.QueryRowContext(ctx, getAthleteLogin, athleteID)
	var i AthleteLogin
	err := row.Scan(
		&i.AthleteID,
		&i.Summit,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OauthAccessToken,
		&i.OauthRefreshToken,
		&i.OauthExpiry,
		&i.OauthTokenType,
		&i.ID,
	)
	return i, err
}

const upsertAthlete = `-- name: UpsertAthlete :one
INSERT INTO
	athletes(
	fetched_at, id, created_at, updated_at,
		summit, username, firstname, lastname, sex, city, state, country,
		follow_count, friend_count, measurement_preference, ftp, weight, clubs
)
VALUES
	(Now(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
ON CONFLICT
	(id)
	DO UPDATE SET
		fetched_at = Now(),
		created_at = $2,
		updated_at = $3,
		summit = $4,
		username = $5,
		firstname = $6,
		lastname = $7,
		sex = $8,
		city = $9,
		state = $10,
		country = $11,
		follow_count = $12,
		friend_count = $13,
		measurement_preference = $14,
		ftp = $15,
		weight = $16,
		clubs = $17
RETURNING id, summit, username, firstname, lastname, sex, city, state, country, follow_count, friend_count, measurement_preference, ftp, weight, clubs, created_at, updated_at, fetched_at
`

type UpsertAthleteParams struct {
	ID                    int64           `db:"id" json:"id"`
	CreatedAt             time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt             time.Time       `db:"updated_at" json:"updated_at"`
	Summit                bool            `db:"summit" json:"summit"`
	Username              string          `db:"username" json:"username"`
	Firstname             string          `db:"firstname" json:"firstname"`
	Lastname              string          `db:"lastname" json:"lastname"`
	Sex                   string          `db:"sex" json:"sex"`
	City                  string          `db:"city" json:"city"`
	State                 string          `db:"state" json:"state"`
	Country               string          `db:"country" json:"country"`
	FollowCount           int32           `db:"follow_count" json:"follow_count"`
	FriendCount           int32           `db:"friend_count" json:"friend_count"`
	MeasurementPreference string          `db:"measurement_preference" json:"measurement_preference"`
	Ftp                   float64         `db:"ftp" json:"ftp"`
	Weight                float64         `db:"weight" json:"weight"`
	Clubs                 json.RawMessage `db:"clubs" json:"clubs"`
}

func (q *sqlQuerier) UpsertAthlete(ctx context.Context, arg UpsertAthleteParams) (Athlete, error) {
	row := q.db.QueryRowContext(ctx, upsertAthlete,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Summit,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Sex,
		arg.City,
		arg.State,
		arg.Country,
		arg.FollowCount,
		arg.FriendCount,
		arg.MeasurementPreference,
		arg.Ftp,
		arg.Weight,
		arg.Clubs,
	)
	var i Athlete
	err := row.Scan(
		&i.ID,
		&i.Summit,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Sex,
		&i.City,
		&i.State,
		&i.Country,
		&i.FollowCount,
		&i.FriendCount,
		&i.MeasurementPreference,
		&i.Ftp,
		&i.Weight,
		&i.Clubs,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FetchedAt,
	)
	return i, err
}

const upsertAthleteLogin = `-- name: UpsertAthleteLogin :one
INSERT INTO
	athlete_logins(
		created_at, updated_at, id,
             athlete_id, summit, provider_id, oauth_access_token,
             oauth_refresh_token, oauth_expiry, oauth_token_type
	)
VALUES
    (Now(), Now(), gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7)
ON CONFLICT
	(athlete_id)
DO UPDATE SET
	updated_at = Now(),
	summit = $2,
	provider_id = $3,
	oauth_access_token = $4,
	oauth_refresh_token = $5,
	oauth_expiry = $6,
	oauth_token_type = $7
RETURNING athlete_id, summit, provider_id, created_at, updated_at, oauth_access_token, oauth_refresh_token, oauth_expiry, oauth_token_type, id
`

type UpsertAthleteLoginParams struct {
	AthleteID         int64     `db:"athlete_id" json:"athlete_id"`
	Summit            bool      `db:"summit" json:"summit"`
	ProviderID        string    `db:"provider_id" json:"provider_id"`
	OauthAccessToken  string    `db:"oauth_access_token" json:"oauth_access_token"`
	OauthRefreshToken string    `db:"oauth_refresh_token" json:"oauth_refresh_token"`
	OauthExpiry       time.Time `db:"oauth_expiry" json:"oauth_expiry"`
	OauthTokenType    string    `db:"oauth_token_type" json:"oauth_token_type"`
}

func (q *sqlQuerier) UpsertAthleteLogin(ctx context.Context, arg UpsertAthleteLoginParams) (AthleteLogin, error) {
	row := q.db.QueryRowContext(ctx, upsertAthleteLogin,
		arg.AthleteID,
		arg.Summit,
		arg.ProviderID,
		arg.OauthAccessToken,
		arg.OauthRefreshToken,
		arg.OauthExpiry,
		arg.OauthTokenType,
	)
	var i AthleteLogin
	err := row.Scan(
		&i.AthleteID,
		&i.Summit,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OauthAccessToken,
		&i.OauthRefreshToken,
		&i.OauthExpiry,
		&i.OauthTokenType,
		&i.ID,
	)
	return i, err
}

const upsertSegmentEffort = `-- name: UpsertSegmentEffort :one
INSERT INTO
	segment_efforts(
		updated_at,
		id, athlete_id, segment_id, name, elapsed_time,
		moving_time, start_date, start_date_local, distance,
		start_index, end_index, device_watts, average_watts,
		kom_rank, pr_rank, activities_id
	)
VALUES
	(Now(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
ON CONFLICT
	(id)
	DO UPDATE SET
		updated_at = Now(),
		athlete_id = $2,
		segment_id = $3,
		name = $4,
		elapsed_time = $5,
		moving_time = $6,
		start_date = $7,
		start_date_local = $8,
		distance = $9,
		start_index = $10,
		end_index = $11,
		device_watts = $12,
		average_watts = $13,
		kom_rank = $14,
		pr_rank = $15,
		activities_id = $16
	RETURNING id, athlete_id, segment_id, name, elapsed_time, moving_time, start_date, start_date_local, distance, start_index, end_index, device_watts, average_watts, kom_rank, pr_rank, updated_at, activities_id
`

type UpsertSegmentEffortParams struct {
	ID             int64         `db:"id" json:"id"`
	AthleteID      int64         `db:"athlete_id" json:"athlete_id"`
	SegmentID      int64         `db:"segment_id" json:"segment_id"`
	Name           string        `db:"name" json:"name"`
	ElapsedTime    float64       `db:"elapsed_time" json:"elapsed_time"`
	MovingTime     float64       `db:"moving_time" json:"moving_time"`
	StartDate      time.Time     `db:"start_date" json:"start_date"`
	StartDateLocal time.Time     `db:"start_date_local" json:"start_date_local"`
	Distance       float64       `db:"distance" json:"distance"`
	StartIndex     int32         `db:"start_index" json:"start_index"`
	EndIndex       int32         `db:"end_index" json:"end_index"`
	DeviceWatts    bool          `db:"device_watts" json:"device_watts"`
	AverageWatts   float64       `db:"average_watts" json:"average_watts"`
	KomRank        sql.NullInt32 `db:"kom_rank" json:"kom_rank"`
	PrRank         sql.NullInt32 `db:"pr_rank" json:"pr_rank"`
	ActivitiesID   int64         `db:"activities_id" json:"activities_id"`
}

func (q *sqlQuerier) UpsertSegmentEffort(ctx context.Context, arg UpsertSegmentEffortParams) (SegmentEffort, error) {
	row := q.db.QueryRowContext(ctx, upsertSegmentEffort,
		arg.ID,
		arg.AthleteID,
		arg.SegmentID,
		arg.Name,
		arg.ElapsedTime,
		arg.MovingTime,
		arg.StartDate,
		arg.StartDateLocal,
		arg.Distance,
		arg.StartIndex,
		arg.EndIndex,
		arg.DeviceWatts,
		arg.AverageWatts,
		arg.KomRank,
		arg.PrRank,
		arg.ActivitiesID,
	)
	var i SegmentEffort
	err := row.Scan(
		&i.ID,
		&i.AthleteID,
		&i.SegmentID,
		&i.Name,
		&i.ElapsedTime,
		&i.MovingTime,
		&i.StartDate,
		&i.StartDateLocal,
		&i.Distance,
		&i.StartIndex,
		&i.EndIndex,
		&i.DeviceWatts,
		&i.AverageWatts,
		&i.KomRank,
		&i.PrRank,
		&i.UpdatedAt,
		&i.ActivitiesID,
	)
	return i, err
}

const insertWebhookDump = `-- name: InsertWebhookDump :one
INSERT INTO
	webhook_dump(
	id, recorded_at, raw
)
VALUES
	(gen_random_uuid(), Now(), $1)
RETURNING id, recorded_at, raw
`

func (q *sqlQuerier) InsertWebhookDump(ctx context.Context, rawJson string) (WebhookDump, error) {
	row := q.db.QueryRowContext(ctx, insertWebhookDump, rawJson)
	var i WebhookDump
	err := row.Scan(&i.ID, &i.RecordedAt, &i.Raw)
	return i, err
}
